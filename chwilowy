 //dwoje oczu
        if(i % kolumny == kolumny - 1 && stol->wartosci[i] == stol->gracz_na_ruchu )  //Sprawdzanie czy jest przy prawej krawędzi i czy X
        {
        if(stol->wartosci[i - 1] == stol->gracz_na_ruchu && stol->wartosci[i - 1 + kolumny] == stol->gracz_na_ruchu && stol->wartosci[i - 1 + 2*kolumny] == stol->gracz_na_ruchu && stol->wartosci[i + 2*kolumny] == stol->gracz_na_ruchu && stol->wartosci[i - 1 + 3*kolumny] == stol->gracz_na_ruchu && stol->wartosci[i - 1 + 4*kolumny] == stol->gracz_na_ruchu&& stol->wartosci[i + 4*kolumny] == stol->gracz_na_ruchu) ocena+=0;
        }
        if(i % kolumny == 0 && stol->wartosci[i] == stol->gracz_na_ruchu)  //Sprawdzanie czy jest przy lewej krawędzi  
        {
            if(stol->wartosci[i + 1] == stol->gracz_na_ruchu && stol->wartosci[i + 1 + kolumny] == stol->gracz_na_ruchu && stol->wartosci[i + 1 + 2*kolumny] == stol->gracz_na_ruchu && stol->wartosci[i + 2*kolumny] == stol->gracz_na_ruchu && stol->wartosci[i + 1 + 3*kolumny] == stol->gracz_na_ruchu && stol->wartosci[i + 1 + 4*kolumny] == stol->gracz_na_ruchu&& stol->wartosci[i + 4*kolumny] == stol->gracz_na_ruchu) ocena+=0;
        }
        if(i < kolumny && stol->wartosci[i] == stol->gracz_na_ruchu)    //Sprawdzanie czy jest przy górnej krawędzi
        {
            if(stol->wartosci[i + kolumny ] == stol->gracz_na_ruchu && stol->wartosci[i + kolumny + 1] == stol->gracz_na_ruchu && stol->wartosci[i + kolumny + 2 ] == stol->gracz_na_ruchu && stol->wartosci[i + 2 ] == stol->gracz_na_ruchu && stol->wartosci[i + kolumny + 3] == stol->gracz_na_ruchu&& stol->wartosci[i + kolumny + 4] == stol->gracz_na_ruchu && stol->wartosci[i + 4] == stol->gracz_na_ruchu) ocena+=0;
        }
        if(i > kolumny * (kolumny - 1) && stol->wartosci[i] == stol->gracz_na_ruchu) //Sprawdzanie czy jest przy dolnej krawędzi
        {
            if(stol->wartosci[i - kolumny ] == stol->gracz_na_ruchu && stol->wartosci[i - kolumny + 1] == stol->gracz_na_ruchu && stol->wartosci[i - kolumny + 2] == stol->gracz_na_ruchu && stol->wartosci[i + 2] == stol->gracz_na_ruchu&& stol->wartosci[i - kolumny + 3] == stol->gracz_na_ruchu && stol->wartosci[i - kolumny + 4] == stol->gracz_na_ruchu&& stol->wartosci[i + 4] == stol->gracz_na_ruchu ) ocena+=0;
        }
        //schody
         if(stol->wartosci[i] == stol->gracz_na_ruchu)
        {
            if (stol->wartosci[i - kolumny - 1] == stol->gracz_na_ruchu && stol->wartosci[i - 2 * kolumny - 2] == stol->gracz_na_ruchu && stol->wartosci[i - kolumny + 1] == stol->gracz_na_ruchu && stol->wartosci[i - 2 * kolumny + 2] == stol->gracz_na_ruchu ) ocena+=0;
            if (stol->wartosci[i - kolumny + 1] == stol->gracz_na_ruchu && stol->wartosci[i - 2 * kolumny + 2] == stol->gracz_na_ruchu && stol->wartosci[i + kolumny + 1] == stol->gracz_na_ruchu && stol->wartosci[i + 2 * kolumny + 2] == stol->gracz_na_ruchu ) ocena+=0;
            if (stol->wartosci[i + kolumny - 1] == stol->gracz_na_ruchu && stol->wartosci[i + 2 * kolumny - 2] == stol->gracz_na_ruchu && stol->wartosci[i + kolumny + 1] == stol->gracz_na_ruchu && stol->wartosci[i + 2 * kolumny + 2] == stol->gracz_na_ruchu ) ocena+=0;
            if (stol->wartosci[i + kolumny + 1] == stol->gracz_na_ruchu && stol->wartosci[i + 2 * kolumny + 2] == stol->gracz_na_ruchu && stol->wartosci[i - kolumny + 1] == stol->gracz_na_ruchu && stol->wartosci[i - 2 * kolumny + 2] == stol->gracz_na_ruchu ) ocena+=0;
        }
